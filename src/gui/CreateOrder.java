/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import gui.custom.CustomRectangularButton;
import gui.custom.CustomScrollBarUI;
import gui.custom.CustomTabbedPane;
import gui.custom.TableActionCellDeleteRender;
import gui.custom.TableActionCellDelete;
import gui.custom.TableActionEvent;
import dao.*;
import entities.*;
import enums.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.time.LocalDateTime;
import java.util.*;
import java.util.List;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.*;
import java.awt.print.PrinterJob;
import java.text.DecimalFormat;
import util.*;

/**
 *
 * @author Trần Ngọc Huyền
 */
public class CreateOrder extends javax.swing.JPanel {

    private static DAOCategory dca = new DAOCategory();
    private DAOCustomer dc = new DAOCustomer();
    private DAOEmployee de = new DAOEmployee();
    private DAOOrder dod = new DAOOrder();
    private DAOOrderdetail dodd = new DAOOrderdetail();
    private DAOBeverage db = new DAOBeverage();
    private DAOPayment dp = new DAOPayment();

    private DefaultTableModel tableOrderModel;
    private Customer c;
    public double finalPrice;
    public double totalPrice;
    public double tenderedPrice;
    public double surplusPrice;

    public Order o;
    public double discount;
    private JPanel panelBevList;
    private int discountPoint;
    public static PrinterJob printerJob;

    private DecimalFormat df = new DecimalFormat("#,###");
//cho t coi chổ chuyển tab đi m, hmmmm, thua nha :)

    /**
     * Creates new form NewManageBevByCate
     */
    public CreateOrder() {
        initComponents();
        rBtnCash.isSelected();
        customTable();
        addTabCategory();
        txtFinalPrice.setEditable(false);
        txtDiscount.setEditable(false);
    }

    public JCheckBox getRewardPoint() {
        return rewardPoint;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jPanel1 = new javax.swing.JPanel();
        panelOrder = new javax.swing.JPanel();
        panelCusInfor = new javax.swing.JPanel();
        panelSDT = new javax.swing.JPanel();
        lblSDT = new javax.swing.JLabel();
        txtSDT = new javax.swing.JTextField();
        btnFindCus = new CustomRectangularButton(new Color[]{Color.WHITE, new Color(177, 126, 97), new Color(177, 126, 97)});
        jLabel1 = new javax.swing.JLabel();
        panelName = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnAddCust = new CustomRectangularButton(new Color[]{Color.WHITE, new Color(111, 69, 24), new Color(111, 69, 24)});
        panel = new javax.swing.JPanel();
        rewardPoint = new javax.swing.JCheckBox();
        lblRewardPoint = new javax.swing.JLabel();
        panelOrderMid = new javax.swing.JPanel();
        panelOrderInfor = new javax.swing.JPanel();
        panelTotal = new javax.swing.JPanel();
        lblTotal = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25));
        txtTotal = new javax.swing.JTextField();
        panelDiscount = new javax.swing.JPanel();
        lblDiscount = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25));
        txtDiscount = new javax.swing.JTextField();
        panelTendered = new javax.swing.JPanel();
        lblTendered = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25));
        txtTendered = new javax.swing.JTextField();
        pannelSuggest = new javax.swing.JPanel();
        panelTop = new javax.swing.JPanel();
        btnSuggestOne = new CustomRectangularButton(new Color[]{Color.BLACK, new Color(235, 228, 226), new Color(235, 228, 226)});
        btnSuggestTwo = new CustomRectangularButton(new Color[]{Color.BLACK, new Color(235, 228, 226), new Color(235, 228, 226)});
        btnSuggestThree = new CustomRectangularButton(new Color[]{Color.black, new Color(235, 228, 226), new Color(235, 228, 226)});
        panelBot = new javax.swing.JPanel();
        btnSuggestFour = new CustomRectangularButton(new Color[]{Color.BLACK, new Color(235, 228, 226), new Color(235, 228, 226)});
        btnSuggestFive = new CustomRectangularButton(new Color[]{Color.BLACK, new Color(235, 228, 226), new Color(235, 228, 226)});
        btnSuggestSix = new CustomRectangularButton(new Color[]{Color.BLACK, new Color(235, 228, 226), new Color(235, 228, 226)});
        panelSurplus = new javax.swing.JPanel();
        lblSurplus = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25));
        txtSurplus = new javax.swing.JTextField();
        panelTypePayment = new javax.swing.JPanel();
        rBtnCash = new javax.swing.JRadioButton();
        rBtnBank = new javax.swing.JRadioButton();
        rBtnWallet = new javax.swing.JRadioButton();
        panelFinal = new javax.swing.JPanel();
        lblFinalPrice = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25), new java.awt.Dimension(243, 25));
        txtFinalPrice = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOrder = new javax.swing.JTable();
        panelOrderBot = new javax.swing.JPanel();
        btnExit = new CustomRectangularButton(new Color[]{new Color(254, 225, 191), new Color(131, 85, 76), new Color(131, 85, 76)});
        btnPayment = new CustomRectangularButton(new Color[]{new Color(254, 225, 191), new Color(102, 44, 33), new Color(131, 85, 76)});
        jPanel3 = new javax.swing.JPanel();
        tabCat = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        txtSearchBev = new javax.swing.JTextField();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        panelOrder.setBackground(new java.awt.Color(210, 180, 160));
        panelOrder.setLayout(new java.awt.BorderLayout());

        panelCusInfor.setBackground(new java.awt.Color(210, 180, 160));
        panelCusInfor.setDoubleBuffered(false);

        panelSDT.setBackground(new java.awt.Color(210, 180, 160));
        panelSDT.setAlignmentX(0.0F);
        panelSDT.setLayout(new java.awt.BorderLayout());

        lblSDT.setBackground(new java.awt.Color(241, 241, 241));
        lblSDT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblSDT.setText("Số điện thoại: ");
        panelSDT.add(lblSDT, java.awt.BorderLayout.WEST);
        lblSDT.setPreferredSize(lblTotal.getPreferredSize());

        txtSDT.setBackground(new java.awt.Color(235, 228, 226));
        txtSDT.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSDT.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        txtSDT.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtSDT.setPreferredSize(new java.awt.Dimension(12, 37));
        txtSDT.setSelectionColor(new java.awt.Color(102, 44, 33));
        panelSDT.add(txtSDT, java.awt.BorderLayout.CENTER);

        btnFindCus.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnFindCus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-search-24-white.png"))); // NOI18N
        btnFindCus.setMargin(new java.awt.Insets(5, 5, 5, 5));
        btnFindCus.setPreferredSize(new java.awt.Dimension(54, 30));
        btnFindCus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindCusActionPerformed(evt);
            }
        });
        panelSDT.add(btnFindCus, java.awt.BorderLayout.EAST);
        btnFindCus.setPreferredSize(new Dimension(70, 20));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(57, 35, 21));
        jLabel1.setText("Thông tin khách hàng");
        panelSDT.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        panelName.setBackground(new java.awt.Color(210, 180, 160));
        panelName.setAlignmentX(0.0F);
        panelName.setLayout(new java.awt.BorderLayout());

        lblName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblName.setText("Họ và tên: ");
        panelName.add(lblName, java.awt.BorderLayout.WEST);

        txtName.setBackground(new java.awt.Color(235, 228, 226));
        txtName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtName.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        txtName.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtName.setPreferredSize(new java.awt.Dimension(12, 37));
        txtName.setSelectionColor(new java.awt.Color(102, 44, 33));
        panelName.add(txtName, java.awt.BorderLayout.CENTER);

        btnAddCust.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAddCust.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-plus-30.png"))); // NOI18N
        btnAddCust.setMargin(new java.awt.Insets(5, 5, 5, 5));
        btnAddCust.setPreferredSize(new java.awt.Dimension(60, 30));
        btnAddCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCustActionPerformed(evt);
            }
        });
        panelName.add(btnAddCust, java.awt.BorderLayout.EAST);
        btnAddCust.setPreferredSize(new Dimension(73, 20));

        panel.setBackground(new java.awt.Color(210, 180, 160));
        panel.setLayout(new java.awt.BorderLayout());

        rewardPoint.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rewardPoint.setText("Sử dụng điểm");
        rewardPoint.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rewardPointItemStateChanged(evt);
            }
        });
        panel.add(rewardPoint, java.awt.BorderLayout.LINE_START);

        lblRewardPoint.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblRewardPoint.setText("0");
        panel.add(lblRewardPoint, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout panelCusInforLayout = new javax.swing.GroupLayout(panelCusInfor);
        panelCusInfor.setLayout(panelCusInforLayout);
        panelCusInforLayout.setHorizontalGroup(
            panelCusInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelSDT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
            .addComponent(panelName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelCusInforLayout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelCusInforLayout.setVerticalGroup(
            panelCusInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCusInforLayout.createSequentialGroup()
                .addComponent(panelSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelOrder.add(panelCusInfor, java.awt.BorderLayout.NORTH);

        panelOrderMid.setBackground(new java.awt.Color(210, 180, 160));
        panelOrderMid.setLayout(new java.awt.BorderLayout());

        panelOrderInfor.setBackground(new java.awt.Color(210, 180, 160));

        panelTotal.setBackground(new java.awt.Color(210, 180, 160));
        panelTotal.setAlignmentX(0.0F);
        panelTotal.setPreferredSize(new java.awt.Dimension(534, 37));
        panelTotal.setLayout(new javax.swing.BoxLayout(panelTotal, javax.swing.BoxLayout.LINE_AXIS));

        lblTotal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTotal.setText("Tổng tiền phải trả: ");
        panelTotal.add(lblTotal);
        panelTotal.add(filler1);

        txtTotal.setEditable(false);
        txtTotal.setBackground(new java.awt.Color(210, 180, 160));
        txtTotal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("0");
        txtTotal.setBorder(null);
        txtTotal.setMargin(new java.awt.Insets(5, 5, 5, 5));
        txtTotal.setPreferredSize(new java.awt.Dimension(100, 25));
        txtTotal.setSelectionColor(new java.awt.Color(102, 44, 33));
        panelTotal.add(txtTotal);

        panelDiscount.setBackground(new java.awt.Color(210, 180, 160));
        panelDiscount.setAlignmentX(0.0F);
        panelDiscount.setPreferredSize(new java.awt.Dimension(243, 37));
        panelDiscount.setLayout(new javax.swing.BoxLayout(panelDiscount, javax.swing.BoxLayout.LINE_AXIS));

        lblDiscount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblDiscount.setText("Giảm giá: ");
        panelDiscount.add(lblDiscount);
        lblDiscount.setPreferredSize(lblTotal.getPreferredSize());
        panelDiscount.add(filler2);

        txtDiscount.setEditable(false);
        txtDiscount.setBackground(new java.awt.Color(210, 180, 160));
        txtDiscount.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtDiscount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtDiscount.setText("0");
        txtDiscount.setBorder(null);
        txtDiscount.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtDiscount.setPreferredSize(new java.awt.Dimension(100, 25));
        txtDiscount.setSelectionColor(new java.awt.Color(102, 44, 33));
        panelDiscount.add(txtDiscount);

        panelTendered.setBackground(new java.awt.Color(210, 180, 160));
        panelTendered.setAlignmentX(0.0F);
        panelTendered.setPreferredSize(new java.awt.Dimension(266, 37));
        panelTendered.setLayout(new javax.swing.BoxLayout(panelTendered, javax.swing.BoxLayout.LINE_AXIS));

        lblTendered.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblTendered.setText("Tiền khách đưa: ");
        panelTendered.add(lblTendered);
        lblTendered.setPreferredSize(lblTotal.getPreferredSize());
        panelTendered.add(filler3);

        txtTendered.setBackground(new java.awt.Color(210, 180, 160));
        txtTendered.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtTendered.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTendered.setText("0");
        txtTendered.setBorder(null);
        txtTendered.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtTendered.setPreferredSize(new java.awt.Dimension(100, 25));
        txtTendered.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTenderedKeyPressed(evt);
            }
        });
        panelTendered.add(txtTendered);

        pannelSuggest.setBackground(new java.awt.Color(210, 180, 160));
        pannelSuggest.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(214, 217, 223)));
        pannelSuggest.setLayout(new java.awt.GridLayout(2, 1));

        panelTop.setLayout(new java.awt.GridLayout(1, 3));

        btnSuggestOne.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSuggestOne.setText("0");
        btnSuggestOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuggestOneActionPerformed(evt);
            }
        });
        panelTop.add(btnSuggestOne);
        btnSuggestOne.setBorderPainted(true);

        btnSuggestTwo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSuggestTwo.setText("0");
        btnSuggestTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuggestTwoActionPerformed(evt);
            }
        });
        panelTop.add(btnSuggestTwo);

        btnSuggestThree.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSuggestThree.setText("0");
        btnSuggestThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuggestThreeActionPerformed(evt);
            }
        });
        panelTop.add(btnSuggestThree);

        pannelSuggest.add(panelTop);

        panelBot.setLayout(new java.awt.GridLayout(1, 3));

        btnSuggestFour.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSuggestFour.setText("0");
        btnSuggestFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuggestFourActionPerformed(evt);
            }
        });
        panelBot.add(btnSuggestFour);

        btnSuggestFive.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSuggestFive.setText("0");
        btnSuggestFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuggestFiveActionPerformed(evt);
            }
        });
        panelBot.add(btnSuggestFive);

        btnSuggestSix.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSuggestSix.setText("0");
        btnSuggestSix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuggestSixActionPerformed(evt);
            }
        });
        panelBot.add(btnSuggestSix);

        pannelSuggest.add(panelBot);

        panelSurplus.setBackground(new java.awt.Color(210, 180, 160));
        panelSurplus.setAlignmentX(0.0F);
        panelSurplus.setPreferredSize(new java.awt.Dimension(243, 37));
        panelSurplus.setLayout(new javax.swing.BoxLayout(panelSurplus, javax.swing.BoxLayout.LINE_AXIS));

        lblSurplus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblSurplus.setText("Tiền thừa: ");
        panelSurplus.add(lblSurplus);
        lblSurplus.setPreferredSize(lblTotal.getPreferredSize());
        lblSDT.setPreferredSize(lblTotal.getPreferredSize());
        lblName.setPreferredSize(lblTotal.getPreferredSize());
        panelSurplus.add(filler5);

        txtSurplus.setEditable(false);
        txtSurplus.setBackground(new java.awt.Color(210, 180, 160));
        txtSurplus.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtSurplus.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtSurplus.setText("0");
        txtSurplus.setBorder(null);
        txtSurplus.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtSurplus.setPreferredSize(new java.awt.Dimension(100, 25));
        txtSurplus.setSelectionColor(new java.awt.Color(102, 44, 33));
        panelSurplus.add(txtSurplus);

        panelTypePayment.setBackground(new java.awt.Color(210, 180, 160));
        panelTypePayment.setPreferredSize(new java.awt.Dimension(333, 37));
        panelTypePayment.setLayout(new java.awt.GridLayout(1, 3));

        rBtnCash.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rBtnCash.setSelected(true);
        rBtnCash.setText("Tiền mặt");
        rBtnCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBtnCashActionPerformed(evt);
            }
        });
        panelTypePayment.add(rBtnCash);

        rBtnBank.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rBtnBank.setText("Ngân hàng");
        panelTypePayment.add(rBtnBank);

        rBtnWallet.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rBtnWallet.setText("Ví điện tử");
        panelTypePayment.add(rBtnWallet);

        panelFinal.setBackground(new java.awt.Color(210, 180, 160));
        panelFinal.setAlignmentX(0.0F);
        panelFinal.setPreferredSize(new java.awt.Dimension(243, 37));
        panelFinal.setLayout(new javax.swing.BoxLayout(panelFinal, javax.swing.BoxLayout.LINE_AXIS));

        lblFinalPrice.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblFinalPrice.setText("Thành tiền");
        panelFinal.add(lblFinalPrice);
        lblFinalPrice.setPreferredSize(lblTotal.getPreferredSize());
        panelFinal.add(filler4);

        txtFinalPrice.setEditable(false);
        txtFinalPrice.setBackground(new java.awt.Color(210, 180, 160));
        txtFinalPrice.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtFinalPrice.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtFinalPrice.setText("0");
        txtFinalPrice.setBorder(null);
        txtFinalPrice.setMargin(new java.awt.Insets(1, 1, 1, 1));
        txtFinalPrice.setPreferredSize(new java.awt.Dimension(100, 25));
        txtFinalPrice.setSelectionColor(new java.awt.Color(102, 44, 33));
        panelFinal.add(txtFinalPrice);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(57, 35, 21));
        jLabel2.setText("Thông tin hoá đơn");

        javax.swing.GroupLayout panelOrderInforLayout = new javax.swing.GroupLayout(panelOrderInfor);
        panelOrderInfor.setLayout(panelOrderInforLayout);
        panelOrderInforLayout.setHorizontalGroup(
            panelOrderInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTypePayment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pannelSuggest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelOrderInforLayout.createSequentialGroup()
                .addGroup(panelOrderInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTendered, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelOrderInforLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelSurplus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelOrderInforLayout.setVerticalGroup(
            panelOrderInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOrderInforLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelTendered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelTypePayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pannelSuggest, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(panelSurplus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelOrderMid.add(panelOrderInfor, java.awt.BorderLayout.SOUTH);

        String[] header = {"Mã", "Tên", "SL", "Đơn giá","Mô tả", " "};
        tableOrderModel = new DefaultTableModel(header,0){
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true, true
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        tableOrder.setModel(tableOrderModel);
        tableOrder.setFont(new java.awt.Font("Segoe UI", 0, 16));
        tableOrder.getTableHeader().setResizingAllowed(false);
        tableOrder.getTableHeader().setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, new Color(102, 44, 33)));
        for (int i = 0; i < tableOrder.getColumnCount(); i++) {
            tableOrder.getColumnModel().getColumn(i).setResizable(false);
        }
        tableOrder.getTableHeader().setPreferredSize(new Dimension(tableOrder.getColumnModel().getTotalColumnWidth(), 50));
        tableOrder.getTableHeader().setDefaultRenderer(new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setBackground(new Color(235, 228, 226));  // Thiết lập màu nền
                label.setOpaque(true);  // Đảm bảo màu nền được áp dụng
                label.setFont(new Font("Segoe UI", Font.BOLD, 17));
                label.setHorizontalAlignment(SwingConstants.CENTER);  // Căn giữa văn bản
                return label;
            }
        });

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        tableOrder.setRowHeight(50);

        tableOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        tableOrder.getTableHeader().setReorderingAllowed(false);

        TableColumnModel columnModel = tableOrder.getColumnModel();
        TableColumn col0 = columnModel.getColumn(0);
        TableColumn col1 = columnModel.getColumn(1);
        TableColumn col2 = columnModel.getColumn(2);
        TableColumn col3 = columnModel.getColumn(3);
        TableColumn col4 = columnModel.getColumn(4);
        TableColumn col5 = columnModel.getColumn(5);

        col0.setPreferredWidth(50);
        col1.setPreferredWidth(120);
        col2.setPreferredWidth(50);
        col3.setPreferredWidth(80);
        col4.setPreferredWidth(100);
        col5.setPreferredWidth(50);
        //tableOrder.setGridColor(new java.awt.Color(255, 255, 255));

        for (int i = 0; i < tableOrder.getColumnCount(); i++) {
            TableColumn column = tableOrder.getColumnModel().getColumn(i);
            column.setCellRenderer(centerRenderer);
        }

        DefaultTableCellRenderer quantityRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {

                // Sử dụng renderer cơ sở để lấy component ban đầu
                Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                // Căn giữa văn bản
                setHorizontalAlignment(SwingConstants.CENTER);

                // Nếu là cột "SL", đặt màu nền
                if (column == 2) {
                    if (isSelected) {
                        cell.setBackground(new Color(235, 228, 226)); // Màu xám nhạt
                        cell.setForeground(Color.BLACK); // Văn bản đen ngay cả khi được chọn
                    } else {
                        cell.setBackground(new Color(235, 228, 226)); // Màu xám nhạt
                        cell.setForeground(Color.BLACK); // Văn bản đen
                    }
                    //            cell.setHorizontalAlignment(SwingConstants.CENTER); // Căn giữa
                } else {
                    // Các cột khác có màu nền và văn bản mặc định
                    if (isSelected) {
                        cell.setBackground(table.getSelectionBackground());
                        cell.setForeground(Color.WHITE); // Văn bản trắng nếu được chọn
                    } else {
                        cell.setBackground(Color.WHITE); // Màu nền mặc định
                        cell.setForeground(Color.BLACK); // Văn bản đen
                    }
                }

                return cell;
            }
        };

        tableOrder.getColumnModel().getColumn(2).setCellRenderer(quantityRenderer);
        tableOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        tableOrder.getTableHeader().setResizingAllowed(false);
        for (int i = 0; i < tableOrder.getColumnCount(); i++) {
            tableOrder.getColumnModel().getColumn(i).setResizable(false);

        }

        //Sự kiện thay đổi số lượng cập nhật tổng giá trên table
        tableOrderModel.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    int row = e.getFirstRow();
                    int col = e.getColumn();
                    System.out.print(tableOrderModel.getValueAt(row, 2).toString());
                    if (col == 2) {
                        try {
                            int newQuantity = Integer.parseInt(tableOrderModel.getValueAt(row, 2).toString());
                            if(newQuantity <= 0) {
                                int newQ = 1;
                                JOptionPane.showMessageDialog(null, "Vui lòng nhập số lượng lớn hơn 0");
                                tableOrderModel.setValueAt(newQ, row, 2);
                                //                        tableOrderModel.removeRow(row);
                            }
                            double price = Double.parseDouble(tableOrderModel.getValueAt(row, 3).toString());

                            double newTotalPrice = 0;
                            for (int i = 0; i < tableOrderModel.getRowCount(); i++) {
                                int quantity = Integer.parseInt(tableOrderModel.getValueAt(i, 2).toString());
                                double unitPrice = Double.parseDouble(tableOrderModel.getValueAt(i, 3).toString());
                                newTotalPrice += quantity * unitPrice;
                            }

                            finalPrice = newTotalPrice;
                            totalPrice = newTotalPrice;
                            txtFinalPrice.setText(df.format(finalPrice));
                            txtTotal.setText(df.format(totalPrice));
                            setButtonsSuggest();
                        } catch (NumberFormatException ex) {
                            int newQty = 1;
                            JOptionPane.showMessageDialog(null, "Nhập số");
                            tableOrderModel.setValueAt(newQty, row, col); //
                        }
                    }
                }
            }
        });
        tableOrder.setGridColor(new java.awt.Color(255, 255, 255));
        tableOrder.setSelectionBackground(new java.awt.Color(102, 44, 33));
        tableOrder.setSelectionForeground(new java.awt.Color(255, 255, 255));
        tableOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrderMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableOrder);
        jScrollPane2.getViewport().setBackground(new Color(235, 228, 226));

        panelOrderMid.add(jScrollPane2, java.awt.BorderLayout.CENTER);
        jScrollPane2.getVerticalScrollBar().setUI(new CustomScrollBarUI());

        panelOrder.add(panelOrderMid, java.awt.BorderLayout.CENTER);

        panelOrderBot.setBackground(new java.awt.Color(255, 255, 255));
        panelOrderBot.setLayout(new java.awt.GridLayout(1, 4));

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("Thoát");
        btnExit.setBorderPainted(false);
        btnExit.setPreferredSize(new java.awt.Dimension(50, 50));
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        panelOrderBot.add(btnExit);
        btnExit.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));

        btnPayment.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnPayment.setText("Thanh toán");
        btnPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPaymentActionPerformed(evt);
            }
        });
        panelOrderBot.add(btnPayment);

        panelOrder.add(panelOrderBot, java.awt.BorderLayout.SOUTH);

        jPanel1.add(panelOrder, java.awt.BorderLayout.EAST);

        jPanel3.setBackground(new java.awt.Color(210, 180, 160));
        jPanel3.setLayout(new java.awt.BorderLayout());

        tabCat.setBackground(new java.awt.Color(210, 180, 160));
        tabCat.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        tabCat.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabCatStateChanged(evt);
            }
        });
        jPanel3.add(tabCat, java.awt.BorderLayout.WEST);
        tabCat.setUI(new CustomTabbedPane());

        jPanel2.setPreferredSize(new java.awt.Dimension(753, 40));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        txtSearchBev.setBackground(new java.awt.Color(210, 180, 160));
        txtSearchBev.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtSearchBev.setText("Tìm sản phẩm...");
        txtSearchBev.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1));
        txtSearchBev.setSelectionColor(new java.awt.Color(102, 44, 33));
        txtSearchBev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchBevActionPerformed(evt);
            }
        });
        txtSearchBev.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchBevKeyReleased(evt);
            }
        });
        jPanel2.add(txtSearchBev);

        jPanel3.add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 981, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindCusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindCusActionPerformed
        String findSdt = txtSDT.getText().trim();
        if (findSdt.length() == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập SĐT");
            txtSDT.requestFocus();
            return;
        }
        c = dc.findByPhone(findSdt);
        if (c != null) {
            txtName.setText(c.getName());
            lblRewardPoint.setText(c.getRewardPoint() + "");
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy khách hàng");
        }
    }//GEN-LAST:event_btnFindCusActionPerformed

    private void btnAddCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCustActionPerformed

        String name = txtName.getText().trim();
        String sdt = txtSDT.getText().trim();
        if (sdt.length() > 0) {
            if (!(sdt.matches("0[0-9]{9}"))) {
                JOptionPane.showMessageDialog(this, "SDT không hợp lệ");
                txtSDT.requestFocus();
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "SDT không được để trống");
            txtSDT.requestFocus();
            return;
        }

        if (name.length() > 0) {
            if (!(name.matches("([A-Z][a-z ]*)+"))) {
                JOptionPane.showMessageDialog(this, "Tên khách hàng không hợp lệ");
                txtName.requestFocus();
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Tên khách hàng không được để trống");
            txtName.requestFocus();
            return;
        }

        c = new Customer(name, sdt);
        if (dc.insert(c)) {
            JOptionPane.showMessageDialog(this, "Thêm khách hàng thành công");
        } else {
            JOptionPane.showMessageDialog(this, "Khách hàng đã là thành viên");
        }

    }//GEN-LAST:event_btnAddCustActionPerformed

    private void rewardPointItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rewardPointItemStateChanged
        setTxtDiscountAndTxtTotal();
    }//GEN-LAST:event_rewardPointItemStateChanged

    private void txtTenderedKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTenderedKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            getSurplusMoney();
            setButtonsSuggest();
        }
    }//GEN-LAST:event_txtTenderedKeyPressed

    private void btnSuggestOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuggestOneActionPerformed
        tenderedPrice = Double.parseDouble(btnSuggestOne.getText());
        txtTendered.setText(df.format(tenderedPrice));
        getSurplusMoney();
    }//GEN-LAST:event_btnSuggestOneActionPerformed

    private void btnSuggestTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuggestTwoActionPerformed
        tenderedPrice = Double.parseDouble(btnSuggestTwo.getText());
        txtTendered.setText(df.format(tenderedPrice));
        getSurplusMoney();
    }//GEN-LAST:event_btnSuggestTwoActionPerformed

    private void btnSuggestThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuggestThreeActionPerformed
        tenderedPrice = Double.parseDouble(btnSuggestThree.getText());
        txtTendered.setText(df.format(tenderedPrice));
        getSurplusMoney();
    }//GEN-LAST:event_btnSuggestThreeActionPerformed

    private void btnSuggestFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuggestFourActionPerformed
        tenderedPrice = Double.parseDouble(btnSuggestFour.getText());
        txtTendered.setText(df.format(tenderedPrice));
        getSurplusMoney();
    }//GEN-LAST:event_btnSuggestFourActionPerformed

    private void btnSuggestFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuggestFiveActionPerformed
        tenderedPrice = Double.parseDouble(btnSuggestFive.getText());
        txtTendered.setText(df.format(tenderedPrice));
        getSurplusMoney();
    }//GEN-LAST:event_btnSuggestFiveActionPerformed

    private void btnSuggestSixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuggestSixActionPerformed
        tenderedPrice = Double.parseDouble(btnSuggestSix.getText());
        txtTendered.setText(df.format(tenderedPrice));
        getSurplusMoney();
    }//GEN-LAST:event_btnSuggestSixActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        clearData();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPaymentActionPerformed
        if(tableOrderModel.getRowCount() <= 0){
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nước uống để tạo đơn");
            return;
        }
        o = new Order();
        int rowCount = tableOrderModel.getRowCount();
        Employee e = de.findById(GUI_Login.e.getEmployeeID());
        List<Orderdetail> ods = new ArrayList<>();
//        finalPrice = Double.parseDouble(txtFinalPrice.getText());
//        totalPrice = Double.parseDouble(txtTotal.getText());
        for (int i = 0; i < rowCount; i++) {
            String OrderID = o.getOrderID();
            Beverage bev = db.findById(tableOrderModel.getValueAt(i, 0).toString());
            int orderQty = Integer.parseInt(tableOrderModel.getValueAt(i, 2).toString());
            String desc = tableOrderModel.getValueAt(i, 4).toString();

            Orderdetail od = new Orderdetail(bev, orderQty, desc);
            ods.add(od);
        }

        o.setOrderDate(LocalDateTime.now());

        String paymentType;
        if (rBtnCash.isSelected()) {
            paymentType = "Tiền Mặt";
        } else if (rBtnBank.isSelected()) {
            paymentType = "Ngân Hàng";
        } else {
            paymentType = "Ví Điện Tử";
        }

        Payment p = new Payment(LocalDateTime.now(), paymentType);
        dp.insert(p);

        if (c == null) {
            c = dc.findById("Cust0000");
        }
//        o = new Order(p, ods, c, e, discount);
        o.setDiscount(discount);

        o.setPayment(p);
        o.setListOfOD(ods);
        o.setEmp(e);
        o.setCust(c);
        
        dod.insert(o);
        finalPrice = 0;
        totalPrice = 0;

        PrintBill pB = new PrintBill();
        new FrameInvoice(o, pB.getPrinterJob(o), true);
        clearData();

    }//GEN-LAST:event_btnPaymentActionPerformed
    private void clearData() {
        txtDiscount.setText("");
        txtFinalPrice.setText("");
        txtName.setText("");
        txtSDT.setText("");
        txtSearchBev.setText("");
        txtSurplus.setText("");
        txtTendered.setText("");
        txtTotal.setText("");
        tableOrderModel.setRowCount(0);
        lblRewardPoint.setText("");
        rewardPoint.setSelected(false);
        btnSuggestOne.setText("");
        btnSuggestTwo.setText("");
        btnSuggestThree.setText("");
        btnSuggestFour.setText("");
        btnSuggestFive.setText("");
        btnSuggestSix.setText("");
    }
    private void txtSearchBevKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBevKeyReleased
        // TODO add your handling code here:
        String text = txtSearchBev.getText();
        int index = tabCat.getSelectedIndex();
        JScrollPane scroll = (JScrollPane) tabCat.getSelectedComponent();
        String name = tabCat.getTitleAt(index);
        List<PanelBeverage> panelBeverages = getListBevByKeyword(text, name);
        loadDataOfTabPane(scroll, panelBeverages);
    }//GEN-LAST:event_txtSearchBevKeyReleased

    private void txtSearchBevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchBevActionPerformed
       
    }//GEN-LAST:event_txtSearchBevActionPerformed

    private void tabCatStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabCatStateChanged
        int index = tabCat.getSelectedIndex();
        JScrollPane scroll = (JScrollPane) tabCat.getSelectedComponent();
        String name = tabCat.getTitleAt(index);
        List<PanelBeverage> panelBeverages = getListBev(name);

        loadDataOfTabPane(scroll, panelBeverages);
    }//GEN-LAST:event_tabCatStateChanged

    private void rBtnCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBtnCashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rBtnCashActionPerformed

    private void tableOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrderMouseClicked
        setTxtDiscountAndTxtTotal();
        setButtonsSuggest();

    }//GEN-LAST:event_tableOrderMouseClicked
    private void customTable() {
        TableActionEvent event = new TableActionEvent() {
            @Override
            public void onDelete(int row) {
                if (tableOrder.isEditing()) {
                    tableOrder.getCellEditor().stopCellEditing();
                }
                int orderQty = Integer.parseInt(tableOrder.getValueAt(row, 2).toString());
                double unitPrice = Double.parseDouble(tableOrder.getValueAt(row, 3).toString());
                double lineTotal = orderQty * unitPrice;
//                prevQuantity = Integer.parseInt(tableOrder.getValueAt(row, 2).toString());
                finalPrice -= lineTotal;
                totalPrice = finalPrice;
                tableOrderModel.removeRow(row);
                txtFinalPrice.setText(df.format(finalPrice));
                txtTotal.setText(df.format(totalPrice));
                setButtonsSuggest();
            }

            @Override
            public void onView(int row) {
                System.out.println("View row : " + row);
            }
        };
        tableOrder.getColumnModel().getColumn(5).setCellRenderer(new TableActionCellDeleteRender());
        tableOrder.getColumnModel().getColumn(5).setCellEditor(new TableActionCellDelete(event));

    }

    public static JLabel getLblRewardPoint() {
        return lblRewardPoint;
    }

    private void loadDataOfTabPane(JScrollPane scroll, List<PanelBeverage> panelBeverages) {
        panelBevList = new JPanel(new GridBagLayout());
        panelBevList.setBackground(new Color(210, 180, 160));

        GridBagConstraints gbc = new GridBagConstraints();

        gbc.insets = new Insets(10, 15, 10, 15);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.NORTHWEST;
        gbc.weightx = 1;
        gbc.weighty = 1;

        for (int j = 0; j < panelBeverages.size(); j++) {
            PanelBeverage beverage = panelBeverages.get(j);
            JButton btn = beverage.getBtnConfirm();
            btn.addActionListener((ActionEvent e) -> {
                String name = beverage.getLblNameBevDialog().getText();
                Beverage b = db.findIdByName(name);
                int qty = (int) beverage.getSpinQuantity().getValue();
                double price = b.getSellingPrice();
                String desc = beverage.getTxtDescDialog().getText();
                boolean isExisted = false;
                for (int i = 0; i < tableOrder.getRowCount(); i++) {
                    if (tableOrderModel.getValueAt(i, 0).toString().equalsIgnoreCase(b.getBeverageID())) {

                        int prevQty = Integer.parseInt(tableOrderModel.getValueAt(i, 2).toString());
                        finalPrice -= prevQty * price;
                        totalPrice = finalPrice;
                        qty += prevQty;
                        tableOrderModel.setValueAt(qty, i, 2);

                        isExisted = true;
                        break;
                    }
                }
                if (!isExisted && !b.isDiscontinued()) {
                    tableOrderModel.addRow(new Object[]{b.getBeverageID(), name, qty, price, desc});
                    finalPrice += qty * price;
                    totalPrice += qty * price;
                }

                txtFinalPrice.setText(df.format(finalPrice));
                txtTotal.setText(df.format(totalPrice));
                setButtonsSuggest();
                beverage.getDialogShowBev().setVisible(false);
            });
            if (j % 3 == 0) {
                gbc.gridx = 0;
                gbc.gridy++;
            }
            panelBevList.add(panelBeverages.get(j), gbc);
            gbc.gridx++;
        }
        scroll.getVerticalScrollBar().setUI(new CustomScrollBarUI());
        scroll.setViewportView(panelBevList);
    }

    private void setTxtDiscountAndTxtTotal() {
        if (rewardPoint.isSelected()) {
            discount = getDiscount() * finalPrice;
            finalPrice -= discount;
            txtDiscount.setText(df.format(discount));
            txtFinalPrice.setText(df.format(finalPrice));
        } else {
            finalPrice = totalPrice;
            txtFinalPrice.setText(df.format(finalPrice));
            txtDiscount.setText("0");
        }
        setButtonsSuggest();
    }

//    public static int getUsedPoint() {
//        int usedPoint = 0;
////        if (lblRewardPoint == null) {
////            return -1;
////        }
//        int point;
//        if (lblRewardPoint.getText() == "" || lblRewardPoint.getText().isEmpty() || lblRewardPoint == null) {
//            point = 0;
//        } else {
//            point = Integer.parseInt(lblRewardPoint.getText());
//        }
//        System.out.println(point);
//
//        if (rewardPoint != null) {
//            if (rewardPoint.isSelected()) {
//                if (point >= 300 && point < 600) {
//                    usedPoint = 300;
//                } else if (point >= 600 && point < 900) {
//                    usedPoint = 600;
//                } else if (point >= 900) {
//                    usedPoint = 900;
//                } else {
//                    usedPoint = 0;
//                }
//            }
//        }
//        return usedPoint;
//    }
    private double getDiscount() {
        if (finalPrice != 0) {
            int point = Integer.parseInt(lblRewardPoint.getText());

            if (point >= 300 && point < 600) {
                discountPoint = 300;
                discount = 0.05;
            } else if (point >= 600 && point < 900) {
                discountPoint = 600;
                discount = 0.1;
            } else if (point >= 900) {
                discountPoint = 900;
                discount = 0.15;
            } else {
                discount = 0;
            }
        }
        return discount;
    }

    private void getSurplusMoney() {
        if (!(txtTendered.getText().isEmpty() && txtFinalPrice.getText().isEmpty() && txtTotal.getText().isEmpty())) {
            try {
                surplusPrice = tenderedPrice - finalPrice;
                txtSurplus.setText(df.format(surplusPrice));
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Chuỗi rỗng, không thể chuyển đổi thành số."); // Xử lý chuỗi rỗng
        }
    }

    private void setButtonsSuggest() {
        int[] suggestions = getSuggestDecimal(finalPrice);
        int length = suggestions.length;

//        
        if (length > 5) {
            btnSuggestSix.setText(suggestions[5] + "");
            btnSuggestSix.setVisible(true);
        }
        if (length > 4) {
            btnSuggestFive.setText(suggestions[4] + "");
            btnSuggestFive.setVisible(true);
        }
        if (length > 3) {
            btnSuggestFour.setText(suggestions[3] + "");
            btnSuggestFour.setVisible(true);
        }
        if (length > 2) {
            btnSuggestThree.setText(suggestions[2] + "");
            btnSuggestThree.setVisible(true);
        }
        if (length > 1) {
            btnSuggestTwo.setText(suggestions[1] + "");
            btnSuggestTwo.setVisible(true);
        }
        btnSuggestOne.setText(suggestions[0] + "");
        btnSuggestOne.setVisible(true);

    }

    private int[] getSuggestDecimal(double finalPrice) {
        int billAmount = (int) finalPrice;
        List<Integer> denominations = getSuggestedDenominations(billAmount);

        // Convert List to array
        int[] resultArray = new int[denominations.size()];
        for (int i = 0; i < denominations.size(); i++) {
            resultArray[i] = denominations.get(i);
        }

        return resultArray;

    }

    private List<Integer> getSuggestedDenominations(int billAmount) {
        List<Integer> suggestedDenominations = new ArrayList<>();

        // Thêm số tiền hóa đơn gốc
        suggestedDenominations.add(billAmount);

        // Tạo các mệnh giá gần với số tiền đầu vào
        int[] nearbyAmounts = {
            ((billAmount / 1000) + 1) * 1000, // Rounding up to nearest 1000
            ((billAmount / 10000) + 1) * 10000, // Rounding up to nearest 10,000
            ((billAmount / 50000) + 1) * 50000, // Rounding up to nearest 50,000
            ((billAmount / 100000) + 1) * 100000, // Rounding up to nearest 100,000
            ((billAmount / 200000) + 1) * 200000, // Rounding up to nearest 100,000
            ((billAmount / 500000) + 1) * 500000 // Rounding up to nearest 500,000
        };

        for (int amount : nearbyAmounts) {
            if (amount > billAmount && !suggestedDenominations.contains(amount)) {
                suggestedDenominations.add(amount);
            }
        }

        //Sắp mảng suggestedDenominations xếp tăng dần
        Collections.sort(suggestedDenominations);

        return suggestedDenominations;
    }

    private PanelBeverage getBev(String nameBev, double sellPrice, String urlImg) {
        PanelBeverage panelBev = new PanelBeverage();

        panelBev.setLblbName(nameBev);
        panelBev.setLblPrice(sellPrice);
        panelBev.setImgBev(urlImg);
//        panelBev.setLblDiscontinued(discontinued);

        return panelBev;
    }

    private List<PanelBeverage> getListBev(String nameTab) {
        List<Beverage> listOfBev = db.getListBevByCatName(nameTab);
        List<PanelBeverage> listOfPanelBev = new ArrayList<>();

        for (Beverage b : listOfBev) {
            String nameBev = b.getName();
            String price = b.getSellingPrice() + "";
            double priceBev = Double.parseDouble(price.substring(0, price.length() - 5));
            String urlImg = b.getImgPath();
            listOfPanelBev.add(getBev(nameBev, priceBev, urlImg));
        }

        return listOfPanelBev;
    }

    private List<PanelBeverage> getListBevByKeyword(String keyword, String nameTab) {
        List<Beverage> listOfBev = db.getListBevByKeyWord(keyword, nameTab);
        List<PanelBeverage> listOfPanelBev = new ArrayList<>();
        //na
        for (Beverage b : listOfBev) {
            String nameBev = b.getName();
            String price = b.getSellingPrice() + "";
            double priceBev = Double.parseDouble(price.substring(0, price.length() - 5));
            String urlImg = b.getImgPath();
            listOfPanelBev.add(getBev(nameBev, priceBev, urlImg));
        }
        return listOfPanelBev;
    }

    public static void addTabCategory() {
        int countOfTab = dca.findAll().size();
        List<Category> listOfcat = dca.findAll();
        tabCat.removeAll();
        for (int i = 0; i < countOfTab; i++) {
            String nameTab = listOfcat.get(i).getName();
            JScrollPane scroll = new JScrollPane();
            scroll.setPreferredSize(new Dimension(1110, 1000));
            tabCat.addTab(nameTab, scroll);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCust;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFindCus;
    private javax.swing.JButton btnPayment;
    public javax.swing.JButton btnSuggestFive;
    public javax.swing.JButton btnSuggestFour;
    public javax.swing.JButton btnSuggestOne;
    public javax.swing.JButton btnSuggestSix;
    public javax.swing.JButton btnSuggestThree;
    public javax.swing.JButton btnSuggestTwo;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDiscount;
    private javax.swing.JLabel lblFinalPrice;
    private javax.swing.JLabel lblName;
    private static javax.swing.JLabel lblRewardPoint;
    private javax.swing.JLabel lblSDT;
    private javax.swing.JLabel lblSurplus;
    private javax.swing.JLabel lblTendered;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel panel;
    private javax.swing.JPanel panelBot;
    private javax.swing.JPanel panelCusInfor;
    private javax.swing.JPanel panelDiscount;
    private javax.swing.JPanel panelFinal;
    private javax.swing.JPanel panelName;
    private javax.swing.JPanel panelOrder;
    private javax.swing.JPanel panelOrderBot;
    private javax.swing.JPanel panelOrderInfor;
    private javax.swing.JPanel panelOrderMid;
    private javax.swing.JPanel panelSDT;
    private javax.swing.JPanel panelSurplus;
    private javax.swing.JPanel panelTendered;
    private javax.swing.JPanel panelTop;
    private javax.swing.JPanel panelTotal;
    private javax.swing.JPanel panelTypePayment;
    private javax.swing.JPanel pannelSuggest;
    private javax.swing.JRadioButton rBtnBank;
    private javax.swing.JRadioButton rBtnCash;
    private javax.swing.JRadioButton rBtnWallet;
    public static javax.swing.JCheckBox rewardPoint;
    public static javax.swing.JTabbedPane tabCat;
    public javax.swing.JTable tableOrder;
    public javax.swing.JTextField txtDiscount;
    public javax.swing.JTextField txtFinalPrice;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSDT;
    private javax.swing.JTextField txtSearchBev;
    private javax.swing.JTextField txtSurplus;
    public javax.swing.JTextField txtTendered;
    public javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
